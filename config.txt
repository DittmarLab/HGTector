
#######################################################
#        HGTector v0.2.1 configuration file           #
#######################################################

# This is a template of the configuration file (config.txt). It contains all parameters
# of the program, with their default values and descriptions. You can create your own
# configuration file based on this template, or from the user graphic interface (GUI.html).
# The configuration file should be placed in the working directory. It may include only
# parameters whose values you wish to modify (non-default).

# Unless otherwise stated, 0 means off, 1 means on, blank means default.
# Characters after a number sign (#) are comments and will not be parsed.


# Program behavior (0: automatic, 1: interactive)
interactive=1


## Protein sequence homology search (searcher.pl) ##

  # TaxIDs of input protein sets (optional)
    # Format: name1:taxid1,name2:taxid2,...
  selfTax=

  # Pre-computed search results (optional)
    # Specify a directory containing search results. One file per protein set.
    # The search results must be in standard BLAST tabular format (-outfmt 6).
    # Results generated by other programs, such as Blat and USEARCH, are valid too,
    # as long as the format is compatible.
  preSearch=

  ## Search tool ##
  
    # Choice of BLAST, RAPSearch2, DIAMOND and customized
    searchTool=blast

    # Number of threads (CPU cores, 0 for all)
    threads=0

    # Number of query sequences per search (0 for all)
    queries=0

    # Save aligned region of subject sequences
    getAln=0

    # Executables of search tools
    blastp=blastp
    blastdbcmd=blastdbcmd
    rapsearch=rapsearch
    prerapsearch=prerapsearch
    diamond=diamond

  ## Database ##

    # Protein database (may use databaser.py to generate it)
    protdb=

    # Taxonomy database (Directory that contains nams.dmp and nodes.dmp)
    taxdump=

    # Local protein_name-to-TaxID dictionary (optional)
    prot2taxid=

    # Taxonomic ranks to record (in low-to-high order)
    ranks=species,genus,family,order,class,phylum

  ## Search cutoffs ##

    # These settings are for both searcher and analyzer. It is recommended to search with
    # more relaxed cutoffs, and to analyze with one or more sets of more stringent ones.
    # This will save the need for extra searches.

    # Maximum E-value cutoff (also used in analyzer.pl)
    evalue=1e-5

    # Minimum percent identity cutoff (also used in analyzer.pl)
    identity=

    # Minimum percent coverage cutoff (also used in analyzer.pl)
      # coverage = aligned region (bp) / query sequence (bp)
    coverage=

    # Number of hits to return
    nHits=500

    # Maximum number of valid hits to preserve (default: no limit) (also used in analyzer.pl)
    maxHits=

  ## Hit filtering ##

    # Ignore taxon names that do not start with a capital letter
    taxonUCASE=1

    # Ignore taxon names containing the following words
    ignoreTaxa=unknown,uncultured,unidentified,unclassified,environmental,plasmid,vector,synthetic,phage
      # Some taxa are too frequently sequenced in the database. They may be masked, too. For example:
      # ignoreTaxa=Escherichia coli,Yersinia pestis,Klebsiella pneumoniae,Salmonella enterica,Vibrio cholerae

    # Merge hits with same taxon names and bit scores
    mergeDuplicates=1

    # Ignore potential paralogs (hits from same organisms but with lower bit scores)
    ignoreParalogs=1

    # Ignore repeated sequence domains (hits) within the same protein
    ignoreSeqRepeats=1

    # Ignore more than one subspecies from the same species
    ignoreSubspecies=0

  ## HTTP BLAST ##

    # Call the NCBI server to perform BLAST and to retrieve sequence / taxonomy information
      # With this option on, no local program or database is needed for the whole analysis.
    httpBlast=1

    # NCBI BLAST database
    httpDb=nr

    # Number of requests sent simultaneously
    requests=1

    # Number of retries on a failed connection
    retries=5

    # Time delay (sec) between requests
    delay=30

    # Time out (sec) for giving up a long wait
    timeout=600

    # Entrez filters

      # Exclude uncultured and environmental samples
      exUncultured=1

      # Search within the following taxon groups (taxids):
      searchTaxids=

      # Ignore organisms under the following taxids
      ignoreTaxids=

      # User-specified Entrez query text (will override settings above)
      eqText=

    # Additional information to retrieve

      # Retrieve taxonomy report (remote BLAST only)
      taxBlast=0

      # Retrieve multiple sequence alignment
      alnBlast=0

      # Retrieve original (unaligned) hit sequences (conflicts with alnBlast)
      seqBlast=0

    # Server URLs

      # BLAST servers
      blastServer=http://blast.ncbi.nlm.nih.gov/Blast.cgi
      blastAlignServer=http://blast.ncbi.nlm.nih.gov/BlastAlign.cgi

      # NCBI Entrez servers
      eSearchServer=http://www.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi
      eFetchServer=http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi
      eSummaryServer=http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi


## Prediction algorithm (analyzer.pl) ##

  # Include the following protein sets in this analysis, and report in order
  inSets=

  # Exclude the following protein sets from this analysis
  exSets=

  ## Grouping scenario ##

    # Option 1: define the 'self' rank
      # All organisms within the same rank as the input genomes are considered as 'self'.
      # Meanwhile, all organisms (except for 'self' organisms) within the same one-level-up
      # rank are considered as 'close'. All other organisms are defined as 'distal'.
    selfRank=0

      # Here is an example: assume the input is some Escherichia genomes, then:
      # selfRank=genus        # genus level (Escherichia)
      # selfRank=family       # family level (Enterobacteriaceae)
      # selfRank=0            # the lowest rank that includes all input genomes (Escherichia)
      # selfRank=1            # the second lowest rank (Enterobacteriaceae)
    
    # Option 2: manually specify TaxID(s) for each group
      # TaxIDs can be looked-up in NCBI taxonomy database. They don't have to be limited to
      # taxonomic ranks defined by 'ranks'.
      # If there are multiple TaxIDs, separate them with commas.
      # Will override option 1.
    selfGroup=
    closeGroup=

  ## Sampling method ##

    # Normalize bit scores as (subject / query)
    normalize=1

    # Use weight (sum of bit scores) instead of number of hits
    useWeight=1

    # Use phylogenetic distance instead of bit scores (see treer.pl)
    useDistance=0

    # Global or individual fingerprint (hit distribution pattern)
      # 0: each protein set has its own pattern
      # 1: one pattern for all protein sets
    unite=1

  ## Fingerprints visualization ##

    # Output raw number/weight data
      # will output a tab-delimited text file, which can be directly read by R
    outRaw=1

    # output fingerprint (basic statistical parameters)
    outFp=1

    # Graph fingerprints
      # 0: don't graph, 1: graph with R (requires R and Perl module "Statistics::R")
    graphFp=0

    # Graphing with R
    boxPlot=1                    # box plot
    histogram=1                  # histogram
    densityPlot=1                # density plot
    scatterPlot=1                # 2D scatter plot
    plot3D=0                     # interactive 3D scatter plot (requires R package "rgl")

    # if there's a reference set of genes (e.g., true positives), label them on the plots
    plotRef= # filename

  ## (IMPORTANT) Cutoffs determination ##

    # Strategy of determining cutoffs
      # 0: user-specified global cutoff
      # 1: user-specified individual cutoffs
      # 2: wait for user to type individual cutoffs
      # 3: draw histogram and isolate the first peak
      # 4: perform kernel density estimation and isolate the first peak
      # 5: (requires R) perform hierarchical clustering and isolate the first cluster
    howCO=4

    # User-specified global cutoff (defaults to 0.25, or the first quartile)
      # It applies to all three groups if howCO = 0.
      # It also applies to individual groups if other chosen approaches fail to determine cutoffs for
      # these particular groups.
    globalCO=0.25

    # User-specified cutoffs for individual groups
      # It is an absolute value, rather than a quantile.
      # For example, "1.35" means that values <= 1.35 are atypical.
      # A "G" means using the global cutoff (globalCO) (will overide howCO options 3-5).
    selfCO=
    closeCO=
    distalCO=

    # Exclude outliers at high end of each group before statistically determining cutoff
      # 0: disable, 1: boxplot, 2: adjusted boxplot, 3: modified Z-score
    exOutlier=0

    # Perform Hartigan's dip test (for non-unimodality) to assess how significant (in terms
      # of p-value) a weight distribution can be divided into "atypical" and "typical" parts.
      # It requires R package "diptest".
    dipTest=0

      # If p-value > this value, use global cutoff instead of statistically-determined
        # cutoff (0: disable).
      dipSig=0.05

    ## Determining cutoffs using histogram ##

      # Number of bins in histogram
      nBin=20

      # Plot histogram on screen
      plotHist=0

    ## Determining cutoffs using kernel density estimation (KDE) ##

      # Computational tool for KDE
        # 0: built-in Perl code, 1: R command "density"
      toolKDE=0

      # Bandwidth selection factor
        # A "bandwidth" indicates how "smooth" the curve is. The program uses Silverman's rule-of-thumb
        # equation to compute an optimal bandwidth. One can further apply a factor on it. The smaller
        # the factor is, the high the resolution (in terms of peaks/pits) the curve will have.
      bwF=1

      # Plot density function on screen
        # 0: don't plot, 1: plot with 100 lines, >1: plot with designated number of lines.
      plotKDE=0

      # Computational tool for identifying local extrema of density function
        # (0: built-in Perl code, 1: R package "pastecs")
      toolExtrema=0

      # Definition of typical and atypical regions
        # 0: the leftmost peak is atypical, all righter peaks are typical.
        # 1: the leftmost peak is atypical, the biggest peak is typical,
             peaks between them (if any) are the grey zone.
        # 2: the biggest peak is typical, all lefter peaks are atypical
        # 3: list all peaks and let the user choose.
      whichPeak=0

      # Location of cutoff (0: 1st pit, 1: midpoint of x-coordinates between 1st peak and 1st
        # pit, 2/3: horizontal/vertical quantile (defined by qKCO) from 1st pit toward 1st peak.
      modKCO=1
      qKCO=0.5


  ## Prediction criteria ##

    # Minimum number of valid hits to consider for HGT
    minHits=0

    # Minimum size (aa) of a valid protein
    minSize=0

    # HGT-derived genes must have atypical self weight (an optional criterion)
    selfLow=0

    # Use conventional best BLAST match method instead of the present method
      # If the first non-self match is distal instead of close, then it is a case of HGT.
      # 0: don't use, 1: unidirectional, 2: bidirectional (BBH).
      # if 2 (BBH) is chosen, an extra reversal BLAST step will be performed.
    BBH=0

    # Also report gene loss events within the self group
      # defined as: (close weight >= cutoff) and (self weight < cutoff)
    loss=0

    # Also report POE (putative gene origination events or database error)
    POE=0


## Summarize results and generate reports ##

  # Title of the report
  title=

  # Ignore hypothetical proteins
    # 0: don't ignore, 1: by product name, 2: by OG name
  deHypo=0

  # Summarize HGT events by putative donor group
  byDonor=1

    # on this rank
    sumRank=order

    # Ignore organisms without this rank defined
    defOnly=1

  # Summarize HGT events by functional annotation
    # This program cannot perform functional annotation. One should provide external sources,
    # such as the report generated by Blast2GO.
  byFunction=0

    # Directory of functional annotations
    dirFunction=/media/Documents/HGT/Rickettsia/blast2go/summary

  # Summarize HGT events by gene orthology
  byOrthology=0

    # Option 1: refer to an external gene orthology scheme file
      # If left blank, the program will try to locate the default orthology scheme file,
      # taxonomy/orthology.db, which might be generated in a previous run. If it is absent,
      # the program will compute one using the built-in function (see below).
    smOrthology=

    # Option 2: use the built-in function to infer gene orthology
      # This function is based on BLAST hits clustering.
      # The criteria that two genes are deemed as an (co-)orthologous pair. Options:
        # 1: one is a hit of the other
        # 2: one is the best hit of the other
        # 3: both are hits of each other
        # 4: both are the best hits of each other (BBH, Overbeek et al., 1999)
        # 5: one is the best hit, the other is any hit (COG, Tatusov et al., 1997)
    pairRule=4

    # Name OGs if necessary
    nameOGs=1

    # Exclude ORFans (genes only occurring once in all genomes)
    exORFan=1

  # Generate reports of the following formats (plain text, HTML and Excel)
  outText=1
  outHTML=1
  outExcel=0
  
  # Attach detailed outputs in Excel spreadsheet
  detailExcel=1


## Phylogenetic pipeline (treer.pl) ##

  # These are additional functionalities. They will not affect the prediction result of HGTector, unless one
    # choose to analyze phylogenetic distance instead of BLAST bit score.
  # The purpose of this pipeline is to facilitate validation and further analyses after running HGTector.

  # Trim unreliable regions from sequence alignment (options: gblocks)
  trimSeq=

  # Realign sequences (options: clustalw, mafft, muscle, clustalo)
  realign=

  # Build phylogenetic tree using specified program (options: clustalw, mafft, phyml, raxml, fasttree)
  buildTree=

    # Amino acid substitution model (options: prottest|criteria, or a specified model)
      # Valid only when PhyML or RAxML is selected. Examples:
      # aaModel=prottest|BIC
      # aaModel=LG+I+G+F
    aaModel=

    # Number of bootstrap replicates (blank means no bootstrapping)
      # for PhyML this is the "-b" parameter. Refer to the PhyML manual for details.
      # for FastTree it will perform SH-test, regardless of this parameter.
    bsTree=

  # Compute and record distance matrix (only available when buildTree=something)
  distance=0

  ## Executables of phylogenetic programs#

    # Sequence trimming
    gblocks=Gblocks

    # Multiple sequence alignment
    clustalw=clustalw
    mafft=mafft
    muscle=muscle

    # Model test
      # because ProtTest can only be launched in its own directory
    prottest=java -jar prottest-3.3.jar -all-distributions -F -AIC -BIC
    dirProttest=

    # Tree reconstruction
    fasttree=FastTree
    raxml=raxmlHPC
    phyml=phyml

